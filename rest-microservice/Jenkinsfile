def latestTag = "1.0.0."
pipeline {
    agent any
    options {
        timestamps()

        timeout(time:15, unit:'MINUTES')

        buildDiscarder(logRotator(
            numToKeepStr: '4',
            daysToKeepStr: '7',
            artifactNumToKeepStr:'30'
        ))
    }
    environment {
        AWS_REGION = 'us-east-1'
        ECR_URL = '006262944085.dkr.ecr.us-east-1.amazonaws.com'
        IMAGE_NAME = 'yasmin-checkpoint-home-exam-rest-ecr'
    }

    stages {
        stage('Build') {
            steps {
                script {
                    dir("rest-microservice") {
                        sh "docker build -t ${IMAGE_NAME}:latest ."
                    }
                }
            }
        }
        stage('Login to AWS') {
            steps {
                script {
                    sh "aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URL"
                }
            }
        }
        stage('Tag') {
            steps {
                script {
                    latestTag = sh(script: "docker pull ${ECR_URL}/${IMAGE_NAME}:latest || true", returnStdout: true).trim()
                    
                    if (latestTag) {
                        latestTag = sh(script: "docker images --format '{{.Tag}}' ${ECR_URL}/${IMAGE_NAME}", returnStdout: true).trim()
                        echo "tags: ${latestTag}"
                        latestTag = sh(script: "docker images --format '{{.Tag}}' ${ECR_URL}/${IMAGE_NAME} | head -n 1", returnStdout: true).trim()
                        echo "last tag: ${latestTag}"
                        
                        def parts = latestTag.tokenize('.')
                        def lastDigit = (parts[-1] as int) + 1
                        latestTag = "${parts[0]}.${parts[1]}.${lastDigit}"
                    } else {
                        latestTag = "1.0.0"
                    }

                    echo "Next version tag: ${latestTag}"
                    sh "docker tag ${IMAGE_NAME}:latest ${ECR_URL}/${IMAGE_NAME}:${latestTag}"
                    sh "docker tag ${IMAGE_NAME}:latest ${ECR_URL}/${IMAGE_NAME}:latest"
                }
            }
        }
        stage('Publish') {
            steps {
                script {
                    sh "docker push ${env.ECR_URL}/${env.IMAGE_NAME}:${latestTag}"
                    sh "docker push ${env.ECR_URL}/${env.IMAGE_NAME}:latest"
                }
            }
        }
        stage('Deploy') {
            steps {
                echo 'Hey'
            }
        }
    }
    post {
        always {
            sh 'docker image prune -f'
            deleteDir()
        }
    }
}

