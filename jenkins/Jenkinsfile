pipeline {
    agent any
    options {
        timestamps()

        timeout(time:60, unit:'MINUTES')

    }

    parameters {
        string(name: 'key_to_change', description: 'The key to modify during deployment')
        string(name: 'value', description: 'The new value for the key')
    }

    stages {
        stage ("test") {
            steps {
                script {
                    dir('terraform') {
                        // Load .tfvars file
                        def tfvarsFile = readFile('terraform.tfvars')
                        def key = params.key_to_change
                        def newValue = params.value

                        def updatedContent = tfvarsFile.split('\n').collect { line ->
                            if (line.startsWith("${key}=")) {
                                return "${key} = \"${newValue}\""
                            } else {
                                return line
                            }
                        }.join('\n')

                        writeFile(file: 'terraform.tfvars', text: updatedContent)
                    }
                }
            }
        }
        stage('push changes to repo') {
            steps {
                script { 
                    sshagent(['github-ssh']) { 
                        sh """
                            git config user.name "Jenkins"
                            git config user.email "jenkins@jenkins.com"
                            git add terraform/terraform.tfvars
                            git commit -m "Update ${params.key_to_change} to ${params.value} in terraform.tfvars"
                            git push origin HEAD:main
                        """
                    }
                }
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}

